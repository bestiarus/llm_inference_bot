from os import environ

from loguru import logger
from openai import OpenAIError
from vkbottle import Bot, API
from vkbottle.bot import Message
from vkbottle.framework.labeler import BotLabeler

from dialogue_tracker import DialogueTracker

_VK_API = API(environ.get("VK_API_TOKEN"))
_VK_BOT_LABELER = BotLabeler()
_DIALOG_TRACKER = DialogueTracker()

_google_spreadsheet_id = environ.get("GOOGLE_SPREADSHEET_ID", None)
if _google_spreadsheet_id is not None:
    from google_sheets_wrapper import GoogleSheetsWrapper

    logger.info(f"Using Google Sheets to track usage")
    _GOOGLE_SHEETS_WRAPPER = GoogleSheetsWrapper(_google_spreadsheet_id)
else:
    logger.info(f"No usage tracking")
    _GOOGLE_SHEETS_WRAPPER = None


async def get_chat_history(peer_id: int, count: int = 50) -> list[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞"""
    try:
        logger.info(f"Getting chat history for peer_id: {peer_id}, count: {count}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history_response = await _VK_API.messages.get_history(
            peer_id=peer_id,
            count=count,
            rev=0  # –í –æ–±—Ä–∞—Ç–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        )
        
        messages = history_response.items
        logger.info(f"Retrieved {len(messages)} messages from VK API")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω
        user_ids = set()
        for msg in messages:
            if msg.from_id > 0:  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä—É–ø–ø
                user_ids.add(msg.from_id)
        
        users_info = {}
        if user_ids:
            logger.info(f"Getting user info for {len(user_ids)} users")
            users = await _VK_API.users.get(user_ids=list(user_ids))
            for user in users:
                users_info[user.id] = f"{user.first_name} {user.last_name}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        chat_context = []
        for msg in reversed(messages):  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            if msg.from_id > 0:  # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_name = users_info.get(msg.from_id, f"User{msg.from_id}")
                chat_context.append({
                    "user_id": msg.from_id,
                    "user_name": user_name,
                    "text": msg.text,
                    "timestamp": msg.date
                })
        
        logger.info(f"Processed {len(chat_context)} user messages for context")
        return chat_context
    except Exception as e:
        logger.error(f"Error getting chat history: {e}")
        return []


_HELP_MESSAGE = """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
- /help -- –ü–æ–º–æ—â—å
- /role <role> -- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å
- /reset -- –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é, –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {messages_in_history}, –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∏—Å—Ç–æ—Ä–∏–∏: {max_alive_dialogue} —Å–µ–∫—É–Ω–¥.
–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: '{role}'
–ï—Å–ª–∏ –±–æ—Ç –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, OpenAI API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞, —Ç–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ —Ç–æ–∫–µ–Ω–∞–º, —Å–±—Ä–æ—Å—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.
–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @boss
"""

_OPENAI_ERROR_MESSAGE = (
    "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ OpenAI, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ ü´†. "
    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é `/reset`"
)
_SYSTEM_ERROR_MESSAGE = (
    "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü´†. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é `/reset` –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @spirin.egor ü§ó!"
)


@_VK_BOT_LABELER.message(command="help")
async def help_message(message: Message):
    user_id = message.from_id
    help_msg = _HELP_MESSAGE.format(role=_DIALOG_TRACKER.get_role(user_id), **_DIALOG_TRACKER.config)
    await message.answer(help_msg)


@_VK_BOT_LABELER.message(command="reset")
async def reset(message: Message):
    user_id = message.from_id
    _DIALOG_TRACKER.reset(user_id)
    await message.answer("–†–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é, –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")


@_VK_BOT_LABELER.message()
async def handle_message(message: Message):
    user_id = message.from_id
    text = message.text
    peer_id = message.peer_id

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ —á–∞—Ç–µ {peer_id}: {text[:50]}...")

    # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    logger.info(f"DEBUG: Processing all messages without mention check")

    if text.startswith("/role"):
        command, argument = text.split(maxsplit=1)
        if not argument:
            await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ä–æ–ª—å: /role <role>")
            return
        _DIALOG_TRACKER.set_role(user_id, argument)
        await message.answer("–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞")
        return

    try:
        logger.info(f"Processing message with context for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        chat_context = await get_chat_history(peer_id, count=50)
        logger.info(f"Retrieved {len(chat_context)} messages from chat history")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
        answer, total_tokens = await _DIALOG_TRACKER.on_message_with_context(
            message.text, user_id, chat_context
        )
        
        user_info = (await _VK_API.users.get(user_id))[0]
        user_name = f"{user_info.last_name} {user_info.first_name}"

        if _GOOGLE_SHEETS_WRAPPER is not None:
            _GOOGLE_SHEETS_WRAPPER.increase_user_usage(user_id, user_name, total_tokens)
            
        logger.info(f"Generated response for user {user_id}: {answer[:50]}...")
        
    except OpenAIError as e:
        logger.warning(f"OpenAI API error: {e}")
        answer = _OPENAI_ERROR_MESSAGE
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        answer = _SYSTEM_ERROR_MESSAGE
        
    await message.answer(answer)


def main():
    logger.disable("vkbottle")
    logger.info(f"Starting VK bot (DEBUG MODE - no mention check)")
    bot = Bot(api=_VK_API, labeler=_VK_BOT_LABELER)
    logger.info(f"Success?")
    bot.run_forever()


if __name__ == "__main__":
    main() 